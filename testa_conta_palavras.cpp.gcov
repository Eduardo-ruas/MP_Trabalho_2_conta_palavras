        -:    0:Source:testa_conta_palavras.cpp
        -:    1:// Copyright 2025 Eduardo de Brito Ruas
        -:    2:#define CATCH_CONFIG_MAIN
        -:    3:// Cabeçalhos C++
        -:    4:#include <fstream>
        -:    5:#include <map>
        -:    6:#include <string>
        -:    7:
        -:    8:// Outros cabeçalhos
        -:    9:#include "catch.hpp"           // NOLINT(build/include_subdir)
        -:   10:#include "conta_palavras.hpp"  // NOLINT(build/include_subdir)
        -:   11:
        -:   12:
        -:   13:// Função auxiliar para criar arquivos de teste
        6:   14:void criaArquivo(const std::string& nomeArquivo,
        -:   15:                const std::string& conteudo) {
       12:   16:  std::ofstream arquivo(nomeArquivo);
        6:   17:  arquivo << conteudo;
        6:   18:  arquivo.close();
        6:   19:}
        -:   20:
        -:   21:/**
        -:   22: * @brief Configuração inicial para todos os testes.
        -:   23: *        Cria os arquivos necessários para os testes.
        -:   24: */
        1:   25:TEST_CASE("Configuração inicial", "[ContadorPalavras]") {
        1:   26:  criaArquivo("arquivo_vazio.txt", "");
        1:   27:  criaArquivo("arquivo_uma_linha.txt", "Este é um teste");
        1:   28:  criaArquivo("arquivo_multiplas_linhas.txt",
        -:   29:              "Este é um teste\nEste é outro teste\n");
        1:   30:  criaArquivo("arquivo_pontuacao.txt",
        -:   31:              "Este é um Teste, com pontuação!\nEste é outro TESTE.\n");
        1:   32:  criaArquivo("arquivo_exemplo.txt",
        -:   33:              "Este texto é o texto que será utilizado\n");
        1:   34:  criaArquivo("arquivo_desordenado.txt",
        -:   35:              "zebra abacate dado casa bola\nelefante abacate\n");
        1:   36:}
        -:   37:
        -:   38:/**
        -:   39: * @brief Testa a contagem de palavras em um arquivo vazio.
        -:   40: */
        1:   41:TEST_CASE("Contagem de palavras em um arquivo vazio", "[ContadorPalavras]") {
        -:   42:  ContadorPalavras contador;
        -:   43:  std::map<std::string, int> resultado =
        3:   44:      contador.contarPalavras("arquivo_vazio.txt");
       1*:   45:  REQUIRE(resultado.empty());
        1:   46:}
        -:   47:
        -:   48:/**
        -:   49: * @brief Testa a contagem de palavras em um arquivo inexistente.
        -:   50: */
        1:   51:TEST_CASE("Contagem de palavras em um arquivo inexistente",
        -:   52:          "[ContadorPalavras]") {
        -:   53:  ContadorPalavras contador;
        -:   54:  std::map<std::string, int> resultado =
        3:   55:      contador.contarPalavras("arquivo_inexistente.txt");
       1*:   56:  REQUIRE(resultado.empty());
        1:   57:}
        -:   58:
        -:   59:/**
        -:   60: * @brief Testa a contagem de palavras em um arquivo com uma linha.
        -:   61: */
        1:   62:TEST_CASE("Contagem de palavras em um arquivo com uma linha",
        -:   63:          "[ContadorPalavras]") {
        -:   64:  ContadorPalavras contador;
        -:   65:  std::map<std::string, int> resultado =
        3:   66:      contador.contarPalavras("arquivo_uma_linha.txt");
        -:   67:
       1*:   68:  REQUIRE(resultado.size() == 4);
       1*:   69:  REQUIRE(resultado["este"] == 1);
       1*:   70:  REQUIRE(resultado["é"] == 1);
       1*:   71:  REQUIRE(resultado["um"] == 1);
       1*:   72:  REQUIRE(resultado["teste"] == 1);
        1:   73:}
        -:   74:
        -:   75:/**
        -:   76: * @brief Testa a contagem de palavras em um arquivo com múltiplas linhas.
        -:   77: */
        1:   78:TEST_CASE("Contagem de palavras em um arquivo com múltiplas linhas",
        -:   79:          "[ContadorPalavras]") {
        -:   80:  ContadorPalavras contador;
        -:   81:  std::map<std::string, int> resultado =
        3:   82:      contador.contarPalavras("arquivo_multiplas_linhas.txt");
        -:   83:
       1*:   84:  REQUIRE(resultado.size() == 5);
       1*:   85:  REQUIRE(resultado["este"] == 2);
       1*:   86:  REQUIRE(resultado["é"] == 2);
       1*:   87:  REQUIRE(resultado["um"] == 1);
       1*:   88:  REQUIRE(resultado["teste"] == 2);
       1*:   89:  REQUIRE(resultado["outro"] == 1);
        1:   90:}
        -:   91:
        -:   92:/**
        -:   93: * @brief Testa a contagem de palavras com pontuação e
        -:   94: *        maiúsculas/minúsculas.
        -:   95: */
        1:   96:TEST_CASE(
        -:   97:    "Contagem de palavras com pontuação e maiúsculas/minúsculas",
        -:   98:    "[ContadorPalavras]") {
        -:   99:  ContadorPalavras contador;
        -:  100:  std::map<std::string, int> resultado =
       3*:  101:      contador.contarPalavras("arquivo_pontuacao.txt");
        -:  102:
       1*:  103:  REQUIRE(resultado.size() == 7);
       1*:  104:  REQUIRE(resultado["este"] == 2);
       1*:  105:  REQUIRE(resultado["é"] == 2);
       1*:  106:  REQUIRE(resultado["um"] == 1);
       1*:  107:  REQUIRE(resultado["teste"] == 2);
       1*:  108:  REQUIRE(resultado["com"] == 1);
       1*:  109:  REQUIRE(resultado["pontuacao"] == 1);
    #####:  110:  REQUIRE(resultado["outro"] == 1);
    #####:  111:}
        -:  112:
        -:  113:/**
        -:  114: * @brief Testa a contagem de palavras em um exemplo específico.
        -:  115: */
        1:  116:TEST_CASE("Contagem do exemplo", "[ContadorPalavras]") {
        -:  117:  ContadorPalavras contador;
        -:  118:  std::map<std::string, int> resultado =
        3:  119:      contador.contarPalavras("arquivo_exemplo.txt");
        -:  120:
       1*:  121:  REQUIRE(resultado.size() == 7);
       1*:  122:  REQUIRE(resultado["este"] == 1);
       1*:  123:  REQUIRE(resultado["texto"] == 2);
       1*:  124:  REQUIRE(resultado["é"] == 1);
       1*:  125:  REQUIRE(resultado["o"] == 1);
       1*:  126:  REQUIRE(resultado["que"] == 1);
       1*:  127:  REQUIRE(resultado["será"] == 1);
       1*:  128:  REQUIRE(resultado["utilizado"] == 1);
        1:  129:}
        -:  130:
        -:  131:/**
        -:  132: * @brief Testa se a saída está em ordem alfabética.
        -:  133: */
        1:  134:TEST_CASE("Verificar ordenação alfabética da saída", "[ContadorPalavras]") {
        -:  135:  ContadorPalavras contador;
        -:  136:  std::map<std::string, int> resultado =
        3:  137:      contador.contarPalavras("arquivo_desordenado.txt");
        -:  138:
       1*:  139:  REQUIRE_FALSE(resultado.empty());
        -:  140:
        2:  141:  std::string palavraAnterior = "";
        7:  142:  for (const auto& par : resultado) {
       6*:  143:    REQUIRE(palavraAnterior <= par.first);
        6:  144:    palavraAnterior = par.first;
        -:  145:  }
        1:  146:}
